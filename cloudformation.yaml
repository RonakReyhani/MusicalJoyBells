AWSTemplateFormatVersion: '2010-09-09'
Description: 'Musical Joy cloudformation Stack'
Parameters:
  ApplicationName:
    Description: Name of the application deploying for the Social Media Analytics
    Type: String
    Default: ChristmasMusicalJoy
  ChristmasJoyAudioBucketName:
    Description: Audio bucket name
    Type: String
    Default: christmas-joy-audio-bucket
  ChristmasJoyFaceCollectionBucketName:
    Description: face collection image bucket name
    Type: String
    Default: christmas-joy-face-collection-bucket
  ChristmasJoyFaceCollectionId:
    Description: face collection Id
    Type: String
    Default: christmas-joy-face-collection-Id
  TelegramBotSecretName:
    Description: name of the Telegram Secret
    Type: String
    Default: telegram-bot-token
  TelegramBotToken:
    Description: API Token for Telegram Bot
    Type: String

Resources:
##----------- SECRETS MANAGER--------------------------------##
  TelegramBotTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref TelegramBotSecretName
      Description: My sample secret description
      SecretString: !Sub '{"apiKey": "${TelegramBotToken}"}'

##----------- S3 STORAGE--------------------------------##
  ChristmasJoyAudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref ChristmasJoyAudioBucketName

  ChristmasJoyFaceCollectionBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref ChristmasJoyFaceCollectionBucketName
##----------- AMAZON KINESIS RESOURCES -----------------##
  # Amazon Data Stream
  ChristmasMusicalJoyDataStream:
    Type: "AWS::Kinesis::Stream"
    Properties: 
      Name: !Sub ${ApplicationName}-Data-Stream
      ShardCount: 1
  # Amazon Video Stream
  ChristmasMusicalJoyVideoStream:
    Type: AWS::KinesisVideo::Stream
    Properties:
      DataRetentionInHours: 24
      Name: !Sub ${ApplicationName}-Video-Stream

##----------- REKOGNITION RESOURCES -----------------##
  RekognitionFaceCollection:
    Type: AWS::Rekognition::Collection
    Properties:
      CollectionId: !Ref ChristmasJoyFaceCollectionId

  RekognitionStreamProcessor:
    Type: AWS::Rekognition::StreamProcessor
    Properties:
      RoleArn: !GetAtt RekognitionVideoIAMRole.Arn
      KinesisVideoStream: 
        Arn: !GetAtt ChristmasMusicalJoyVideoStream.Arn
      FaceSearchSettings:
        CollectionId: !Ref ChristmasJoyFaceCollectionId
        FaceMatchThreshold: 98
      KinesisDataStream: 
        Arn: !GetAtt ChristmasMusicalJoyDataStream.Arn

##----------- EVENT MESSAGING SERVICES -----------------##
  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub ${ApplicationName}-SNS-Topic
      Subscription:
        -
          Endpoint: !GetAtt InformHostLambda.Arn
          Protocol: lambda

##----------- LAMBDA RESOURCES -----------------##

  GetVideoAnalysisLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Code: ./.build/GetVideoAnalysis.zip
      FunctionName: GetVideoAnalysisLambda
      Handler: src/GetVideoAnalysis.handler
      Role: !GetAtt GetVideoAnalysisLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC: !Ref SNSTopic
      Runtime: "nodejs18.x"
      MemorySize: 1024
      Timeout: "900"

  GetVideoAnalysisLambdaKinesisMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties: 
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt ChristmasMusicalJoyDataStream.Arn
      FunctionName: !GetAtt  GetVideoAnalysisLambda.Arn
      StartingPosition: "TRIM_HORIZON"

  InformHostLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Code: .build/InformHost.zip
      FunctionName: InformHostLambda
      Handler: src/InformHost.handler
      Role: !GetAtt InformHostLambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref ChristmasJoyAudioBucketName
          SECRET_NAME: !Ref TelegramBotSecretName
      Runtime: "nodejs18.x"
      MemorySize: 1024
      Timeout: "900"

  InformHostLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt InformHostLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic

## -----------------------------IAM-------------------------------------##
  GetVideoAnalysisLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: GetVideoAnalysisLambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'sns:Publish'
                Resource: !Ref SNSTopic
              -
                Effect: Allow
                Action:
                    - 'kinesis:GetRecords'
                    - 'kinesis:GetShardIterator'
                    - 'kinesis:DescribeStream'
                    - 'kinesis:ListStreams'
                Resource: !GetAtt ChristmasMusicalJoyDataStream.Arn

  InformHostLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: InformHostLambdaRole-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - "secretsmanager:ListSecrets"
                    - "secretsmanager:GetSecretValue"
                Resource: !Ref TelegramBotTokenSecret
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${ChristmasJoyAudioBucket}/*"
                  - !Sub "arn:aws:s3:::${ChristmasJoyAudioBucket}"

  RekognitionVideoIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: RekognitionVideoIAMRole-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'kinesis:PutRecord'
                    - 'kinesis:PutRecords'
                Resource: !GetAtt ChristmasMusicalJoyDataStream.Arn
              -
                Effect: Allow
                Action:
                    - 'kinesisvideo:GetDataEndpoint'
                    - 'kinesisvideo:GetMedia'
                Resource: !GetAtt ChristmasMusicalJoyVideoStream.Arn
              -
                Effect: Allow
                Action:
                    - 'rekognition:*'
                Resource: '*'

##----------- LAMBDA LOG GROUPS -----------------------------------------##
  GetVideoAnalysisLambdaLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/GetVideoAnalysisLambda"
      RetentionInDays: 7

  GetVideoAnalysisLambdaLogPermissions:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
      - !Ref GetVideoAnalysisLambdaRole
      PolicyName: "GetVideoAnalysisLambdaLogGroup-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${GetVideoAnalysisLambdaLogGroup}"
            - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${GetVideoAnalysisLambdaLogGroup}:*"
            - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${GetVideoAnalysisLambdaLogGroup}:log-stream:*"

  InformHostLambdaLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/InformHostLambda"
      RetentionInDays: 7

  InformHostLambdaLogPermissions:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
      - !Ref InformHostLambdaRole
      PolicyName: !Sub "InformHostLambdaLogGroup-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${InformHostLambdaLogGroup}"
            - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${InformHostLambdaLogGroup}:*"
            - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${InformHostLambdaLogGroup}:log-stream:*"
  # -----------------------------Outputs-------------------------------------#
Outputs:
  KinesisDataStreamArn:
    Description: Kinesis Data Stream Arn (used in Stream Processor Input)
    Value: !GetAtt ChristmasMusicalJoyDataStream.Arn

  ChristmasMusicalJoyVideoStreamArn:
    Description: Kinesis Video Stream Arn (used in Stream Processor Input)
    Value: !GetAtt ChristmasMusicalJoyVideoStream.Arn

  RekognitionVideoIAMRole:
    Description: Rekognition Video Processing IAM Arn (used in Stream Processor Input)
    Value: !GetAtt RekognitionVideoIAMRole.Arn
